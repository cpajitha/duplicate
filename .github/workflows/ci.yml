name: CI Pipeline

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Chrome and Chromedriver for Selenium
        run: |
          sudo apt update
          sudo apt install -y wget curl unzip jq xvfb libgbm1 libnspr4 \
                              libnss3 libx11-xcb1 libxcomposite1 libxcursor1 \
                              libxdamage1 libxfixes3 libxi6 libxrandr2 libxss1 libxtst6
          
          # Install Google Chrome (latest stable version)
          wget -q -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome.deb || sudo apt-get -f install -y
          google-chrome --version

          # Fetch latest Chromedriver compatible with installed Chrome
          LATEST_DRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/latest-available/linux64.json" | jq -r '.chromedriver')
          echo "Downloading Chromedriver from: $LATEST_DRIVER_URL"

          wget -q -O chromedriver.zip "$LATEST_DRIVER_URL"
          if [ ! -s chromedriver.zip ]; then
              echo "❌ Chromedriver download failed!"
              exit 1
          fi

          unzip chromedriver.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version

      - name: Run Selenium tests
        run: |
          xvfb-run --auto-servernum python testing_with_selenium.py  # Headless mode

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build --platform linux/amd64 -t cpajitha/fastapi_app:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: |
          docker tag cpajitha/fastapi_app:${{ github.sha }} cpajitha/fastapi_app:latest
          docker push cpajitha/fastapi_app:${{ github.sha }}
          docker push cpajitha/fastapi_app:latest

      - name: Run Docker container
        run: docker run -d --name fastapi_container -p 8000:8000 cpajitha/fastapi_app:${{ github.sha }}

      - name: Wait for FastAPI Server
        run: |
          retries=10
          delay=3
          for i in $(seq 1 $retries); do
              if curl -s http://127.0.0.1:8000/docs; then
                  echo "✅ FastAPI server is up!"
                  exit 0
              else
                  echo "⏳ FastAPI server not available yet. Retrying in $delay seconds..."
                  sleep $delay
              fi
          done
          echo "❌ FastAPI server failed to start."
          exit 1

      - name: Run pytest tests
        run: pytest -v testing_with_pytest.py
      
      - name: Run unittest tests
        run: python testing_with_unittest.py

      - name: Stop and Remove Docker container
        if: always()
        run: |
          docker stop fastapi_container || true
          docker rm fastapi_container || true
